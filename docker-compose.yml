services:
  initializer:
    # 使用build来构建image，生成的image名为${项目名}_service名，即initializer_initializer:latest
    build: ./
    networks:
      - dbnet
    # 将容器的8090端口映射给宿主机的8080
    ports:
      - 8090:8090
      # 远程调试用的端口
      - 5001:5001
#    运行于linux下，且需要访问宿主机服务则需要如下配置；
#    extra_hosts:
#      - host.docker.internal:host-gateway
    depends_on:
      mysql:
        condition: service_started
#      nacos:
#        condition: service_started
    volumes:
      # 冒号右边不能有空格！
      - maven_m2:/root/.m2
      # bind mounts，将当前目录挂载到容器的/app目录，开发阶段很有用；
      - ./:/app
    command: ["./mvnw", "spring-boot:run"]

  mysql:
    # 直接使用指定image，此时image名就为mysql:5.7
    image: mysql:5.7
    container_name: mysqlserver
    networks:
      - dbnet
    environment:
      MYSQL_ROOT_PASSWORD: 1234
    volumes:
      - ./data/mysql/data:/var/lib/mysql
# 如果部署在宿主机，注释如下service
  nacos:
    image: nacos/nacos-server:v2.1.2
    container_name: nacos
    hostname: nacos
    ports:
      - "8848:8848"
      - "9848:9848"
    networks:
      - dbnet
    volumes:
      - ./standalone-logs/:/home/nacos/logs
    environment:
      - PREFER_HOST_MODE=hostname
      - MODE=standalone
      # 增加如下配置项，则表示使用mysql作数据存储，否则则是默认的derby存储
      - SPRING_DATASOURCE_PLATFORM=mysql
      - MYSQL_SERVICE_HOST=mysqlserver
      - MYSQL_SERVICE_PORT=3306
      - MYSQL_SERVICE_DB_NAME=nacos
      - MYSQL_SERVICE_USER=root
      - MYSQL_SERVICE_PASSWORD=1234
    depends_on:
      # 如果使用mysql作数据存储，则这里最好依赖下
      mysql:
        condition: service_started

networks:
  # 先docker network create dbnet
  dbnet:
    external: true
volumes:
  maven_m2: